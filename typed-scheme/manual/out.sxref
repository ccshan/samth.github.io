((1 ()) ((1) 6 (((lib "struct.ss" "scribble") . deserialize-delayed-element) ((lib "struct.ss" "scribble") . deserialize-info:element-v0) ((lib "struct.ss" "scribble") . deserialize-info:link-element-v0) ((lib "struct.ss" "scribble") . deserialize-delayed-index-desc) ((lib "manual-struct.ss" "scribble") . deserialize-info:form-index-desc-v0) ((lib "decode-struct.ss" "scribble") . deserialize-info:part-index-desc-v0)) 48 ("schemesymbol" "schemesyntaxlink" (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5")) (c "A First Function") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type")) (c "Binding Forms") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:")) (c def c (u . ":#%kernel:case-lambda")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:")) (c "Recursive Datatypes and Unions") (c "Structure Definitions") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean")) (c "Type Aliases") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct")) (c "Giving Names to Types") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number")) (c "Type Reference") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:")) (c def c (u . ":#%kernel:values")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed")) (c "Adding more complexity") (c "Type Annotation") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof")) (c "Starting with Typed Scheme") (c "Require") (c "Polymorphism") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:")) (c "Special Form Reference") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type")) (c "The Typed Scheme Language Level") (c "Typed Scheme") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:")) (c "Defining New Datatypes") (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any")) (c def c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword"))) () (h ! (equal) ((c index-entry c (? . 27)) c (c (u . "pcase-lambda:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "pcase-lambda:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:")))))))))))) c (3 (4 pcase-lambda: ()))) ((? . 47) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword)")) ((c index-entry c (? . 24)) c (c (u . "Number")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Number")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number")))))))))))) c (3 (4 Number ()))) ((? . 7) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :#%kernel:case-lambda)")) ((c index-entry c (? . 2)) c (c (u . "All")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "All")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5")))))))))))) c (3 (4 All ()))) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Starting_with_Typed_Scheme"))) c (c (u . "Starting with Typed Scheme")) c (c (1 #f (? . 35))) c (5)) ((? . 12) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:String)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Structure_Definitions"))) c (c (u . "Structure Definitions")) c (c (1 #f (? . 14))) c (5)) ((? . 11) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3)")) ((c index-entry c (? . 19)) c (c (u . "String")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "String")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String")))))))))))) c (3 (4 String ()))) ((c index-entry c (? . 6)) c (c (u . "pdefine:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "pdefine:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:")))))))))))) c (3 (4 pdefine: ()))) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Binding_Forms"))) c (c (u . "Binding Forms")) c (c (1 #f (? . 5))) c (5)) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:A_First_Function"))) c (c (u . "First Function")) c (c (1 #f (? . 3))) c (5)) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Polymorphism")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 37) c #f c (u . "(part Polymorphism)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Giving_Names_to_Types"))) c (c (u . "Giving Names to Types")) c (c (1 #f (? . 21))) c (5)) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:)")) ((c index-entry c (? . 15)) c (c (u . "lambda:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "lambda:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:")))))))))))) c (3 (4 lambda: ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Aliases")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 17) c #f c (u . "(part Type_Aliases)")) ((c index-entry c (? . 4)) c (c (u . "define-type")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "define-type")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type")))))))))))) c (3 (4 define-type ()))) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5)")) ((? . 2) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:lang-level")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 41) c #f c (u . "(part lang-level)")) ((? . 9) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:)")) ((c index-entry c (? . 26)) c (c (u . "Option")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Option")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option")))))))))))) c (3 (4 Option ()))) ((? . 10) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2)")) ((? . 8) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:A_First_Function")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 3) c #f c (u . "(part A_First_Function)")) ((? . 4) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Binding_Forms")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 5) c #f c (u . "(part Binding_Forms)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Annotation")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 31) c #f c (u . "(part Type_Annotation)")) ((? . 6) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:special-forms")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 39) c #f c (u . "(part special-forms)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Recursive_Datatypes_and_Unions")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 13) c #f c (u . "(part Recursive_Datatypes_and_Unions)")) ((c index-entry c (? . 7)) c (c (u . "case-lambda")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "case-lambda")) (c form c (u . ":#%kernel:case-lambda")))))))))))) c (3 (4 case-lambda ()))) ((? . 18) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair)")) ((c index-entry c (? . 8)) c (c (u . "Vectorof")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Vectorof")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7")))))))))))) c (3 (4 Vectorof ()))) ((c index-entry c (? . 9)) c (c (u . "plambda:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "plambda:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:")))))))))))) c (3 (4 plambda: ()))) ((c index-entry c (? . 10)) c (c (u . "U")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "U")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2")))))))))))) c (3 (4 U ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:top")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 42) c #t c (u . "(part top)")) ((c index-entry c (? . 11)) c (c (u . "mu")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "mu")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3")))))))))))) c (3 (4 mu ()))) ((c index-entry c (? . 12)) c (c (u . "let*:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "let*:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:")))))))))))) c (3 (4 let*: ()))) ((? . 28) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :#%kernel:values)")) ((c index-entry c (? . 22)) c (c (u . "letrec:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "letrec:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:")))))))))))) c (3 (4 letrec: ()))) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Recursive_Datatypes_and_Unions"))) c (c (u . "Recursive Datatypes and Unions")) c (c (1 #f (? . 13))) c (5)) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Require")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 36) c #f c (u . "(part Require)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:let:)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7)")) ((? . 23) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Structure_Definitions")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 14) c #f c (u . "(part Structure_Definitions)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair)")) ((c index-entry c (? . 40)) c (c (u . "require/opaque-type")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "require/opaque-type")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type")))))))))))) c (3 (4 require/opaque-type ()))) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type)")) ((? . 33) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:let:)")) ((c index-entry c (? . 32)) c (c (u . "define-type-alias")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "define-type-alias")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias")))))))))))) c (3 (4 define-type-alias ()))) ((? . 16) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean)")) ((c index-entry c (? . 34)) c (c (u . "Listof")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Listof")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof")))))))))))) c (3 (4 Listof ()))) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:)")) ((? . 20) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct)")) ((? . 15) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:)")) ((c index-entry c (? . 16)) c (c (u . "Boolean")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Boolean")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean")))))))))))) c (3 (4 Boolean ()))) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Defining_New_Datatypes"))) c (c (u . "Defining New Datatypes")) c (c (1 #f (? . 44))) c (5)) ((c form c (u . ":#%kernel:case-lambda")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :#%kernel:case-lambda)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:define:)")) ((? . 46) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Aliases"))) c (c (u . "Type Aliases")) c (c (1 #f (? . 17))) c (5)) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof)")) ((c index-entry c (? . 38)) c (c (u . "case-lambda:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "case-lambda:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:")))))))))))) c (3 (4 case-lambda: ()))) ((c index-entry c (? . 18)) c (c (u . "Pair")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Pair")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair")))))))))))) c (3 (4 Pair ()))) ((? . 19) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:String)")) ((c index-entry c (? . 20)) c (c (u . "require-typed-struct")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "require-typed-struct")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct")))))))))))) c (3 (4 require-typed-struct ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Giving_Names_to_Types")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 21) c #f c (u . "(part Giving_Names_to_Types)")) ((? . 43) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:define:)")) ((? . 22) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:)")) ((c index-entry c (? . 23)) c (c (u . "define-typed-struct")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "define-typed-struct")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct")))))))))))) c (3 (4 define-typed-struct ()))) ((? . 24) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:type-ref"))) c (c (u . "Type Reference")) c (c (1 #f (? . 25))) c (5)) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol)")) ((c index-entry c (? . 45)) c (c (u . "Symbol")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Symbol")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol")))))))))))) c (3 (4 Symbol ()))) ((? . 29) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:type-ref")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 25) c #f c (u . "(part type-ref)")) ((? . 26) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2)")) ((? . 27) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:)")) ((c index-entry c (? . 28)) c (c (u . "values")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "values")) (c form c (u . ":#%kernel:values")))))))))))) c (3 (4 values ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:complex")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 30) c #f c (u . "(part complex)")) ((c index-entry c (? . 29)) c (c (u . "require/typed")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "require/typed")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed")))))))))))) c (3 (4 require/typed ()))) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:complex"))) c (c (u . "Adding more complexity")) c (c (1 #f (? . 30))) c (5)) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Annotation"))) c (c (u . "Type Annotation")) c (c (1 #f (? . 31))) c (5)) ((? . 32) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias)")) ((c index-entry c (? . 33)) c (c (u . "let:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "let:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:")))))))))))) c (3 (4 let: ()))) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias)")) ((? . 34) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword)")) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Starting_with_Typed_Scheme")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 35) c #f c (u . "(part Starting_with_Typed_Scheme)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Require"))) c (c (u . "Require")) c (c (1 #f (? . 36))) c (5)) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Polymorphism"))) c (c (u . "Polymorphism")) c (c (1 #f (? . 37))) c (5)) ((? . 38) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:special-forms"))) c (c (u . "Special Form Reference")) c (c (1 #f (? . 39))) c (5)) ((? . 40) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:lang-level"))) c (c (u . "Typed Scheme Language Level")) c (c (1 #f (? . 41))) c (5)) ((c form c (u . ":#%kernel:values")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :#%kernel:values)")) ((c index-entry c (c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:typed-scheme"))) c (c (u . "Typed Scheme")) c (c (1 #f (? . 42))) c (5)) ((c index-entry c (? . 43)) c (c (u . "define:")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "define:")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:")))))))))))) c (3 (4 define: ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:Defining_New_Datatypes")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 44) c #f c (u . "(part Defining_New_Datatypes)")) ((? . 45) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(def :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol)")) ((c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c #f c #f c (u . "(form :/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option)")) ((c index-entry c (? . 46)) c (c (u . "Any")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Any")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any")))))))))))) c (3 (4 Any ()))) ((c index-entry c (? . 47)) c (c (u . "Keyword")) c (c (0 (1 #f (c (1 (? . 0) (c (0 (1 #f (c (2 (? . 1) (c (u . "Keyword")) (c form c (u . ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword")))))))))))) c (3 (4 Keyword ()))) ((c part c (u . "/home/samth/work/typed-scheme/doc/manual.scrbl:typed-scheme")) c (u . #"/home/samth/work/typed-scheme/compiled/doc/manual/index.html") c (? . 42) c #t c (u . "(part typed-scheme)")))) ((index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number")) (def ":#%kernel:case-lambda") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Starting_with_Typed_Scheme")) (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Structure_Definitions")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Binding_Forms")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:A_First_Function")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Polymorphism") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Giving_Names_to_Types")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Aliases") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type")) (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:All5.5") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:lang-level") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:A_First_Function") (def ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Binding_Forms") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Annotation") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:special-forms") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pdefine:") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Recursive_Datatypes_and_Unions") (index-entry (def ":#%kernel:case-lambda")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:top") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let*:")) (def ":#%kernel:values") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Recursive_Datatypes_and_Unions")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Require") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Vectorof7.7") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Structure_Definitions") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed") (form ":/home/samth/work/typed-scheme/doc/../private/../CSU660/datatype.ss:define-type") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Boolean")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Defining_New_Datatypes")) (form ":#%kernel:case-lambda") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Aliases")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:lambda:") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Pair")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:String") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require-typed-struct")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Giving_Names_to_Types") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:letrec:") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-typed-struct")) (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Number") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:type-ref")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:plambda:") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol")) (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:type-ref") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:U2.2") (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:pcase-lambda:") (index-entry (def ":#%kernel:values")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:complex") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/typed")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:complex")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Type_Annotation")) (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:let:")) (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define-type-alias") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Listof") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:mu3.3") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword") (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Starting_with_Typed_Scheme") (form ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Require")) (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Polymorphism")) (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:case-lambda:") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:special-forms")) (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:require/opaque-type") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:lang-level")) (form ":#%kernel:values") (index-entry (part "/home/samth/work/typed-scheme/doc/manual.scrbl:typed-scheme")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/prims.ss:define:")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:Defining_New_Datatypes") (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Symbol") (form ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Option") (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Any")) (index-entry (def ":/home/samth/work/typed-scheme/doc/../private/base-env.ss:Keyword")) (part "/home/samth/work/typed-scheme/doc/manual.scrbl:typed-scheme")))